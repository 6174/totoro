#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var commander = require('commander');
var spawn = require('win-spawn');
require('colorful').colorful();

var program = require('../lib/utils/program');
var env = require('../lib/utils/env');
var pkg = fs.read

var pkgStr = fs.readFileSync(path.join(module.filename, '../../package.json'));
var pkg = JSON.parse(pkgStr)

commander.helpInformation = function() {
  return [
    '',
    '  Totoro 支付宝前端质量控制解决方案'.to.bold.color,
    '',
    '  Usage: ' + this._name + ' ' + this.usage(),
    '' + this.commandHelp(),
    '  Options:',
    '',
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    ''
  ].join('\n');
};

commander
  .version(pkg.version)
  .usage('<command> [options]');


var moduleCommands = {
  test: 'test'
};

// sub command help
commander.on('--help', function() {
  console.log('  ' + 'System Commands:'.to.bold.magenta.color);
  console.log();
  program.printHelp(new program('help', 'show help information'));
  console.log();

  console.log('  ' + 'Default Commands:'.to.bold.green.color);
  console.log();
  Object.keys(moduleCommands).forEach(function(key) {
    program.printHelp(new program(key, moduleCommands[key]));
  });
  console.log();
});

commander.parse(process.argv);

var args = process.argv.slice(3);
var subcmd = commander.args[0];

if (!subcmd) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}

if (subcmd === 'help') {
  var helpcmd = commander.args[1];
  if (!helpcmd) {
    process.stdout.write(commander.helpInformation());
    commander.emit('--help');
    process.exit();
  }

  var bin = executable(helpcmd);
  if (bin) {
    spawn(bin, ['--help'], {stdio: 'inherit', customFds: [0, 1, 2]});
  }
} else {
  bin = executable(subcmd);
  if (bin) {
    spawn(bin, args, {stdio: 'inherit', customFds: [0, 1, 2]});
  }
}


// helpers
// ----------
function executable(subcmd) {
  // find executable
  var bin = 'totoro-' + subcmd;

  var local = path.join(__dirname, bin);
  if (fs.existsSync(local)) {
    return local;
  }

  var commands = Object.keys(moduleCommands);
}


