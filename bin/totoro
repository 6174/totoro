#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var commander = require('commander')
var color = require('colorful')



commander.helpInformation = function() {
    return [
        '',
        color.cyan('  A simple, easy-to-use and stable front-end unit testing tool.'),
        '',
        color.green('  Usage:'),
        '    ' + this._name + ' ' + this.usage(),
        '',
        color.green('  Options:'),
        '' + this.optionHelp().replace(/^/gm, '    '),
        '',
        color.green('  More Info:'),
        '    ' + color.underline('https://github.com/totorojs/totoro'),
        '',
        ''
    ].join('\n')
}

commander
    .option('-v, --version', 'output the version number')
    .option('--verbose', 'show debug log')
    .option('--runner [s]', 'runner path')
    .option('--browsers [s]', 'browsers to run test', split)
    .option('--adapter [s]', 'report adapter')
    .option('--charset [s]', 'charset')
    .option('--timeout [n]', 'client timeout')
    .option('--clientHost [s]', 'client server host')
    .option('--clientPort [n]', 'client server port')
    .option('--serverHost [s]', 'server host')
    .option('--serverPort [n]', 'server port')
    .option('--list', 'view available browsers')
    .parse(process.argv)

if (commander.rawArgs.length === 3 &&
        (commander.rawArgs[2] === '-v' || commander.rawArgs[2] === '--version')) {
    var pkgFile = path.join(__dirname, '..', 'package.json')
    var version = JSON.parse(fs.readFileSync(pkgFile)).version
    console.info('\n  ' + color.cyan(version) + '\n')
    process.exit(0)
}

var cfg = getCfg(commander)

if (cfg.list) {
    var list = require('../lib/list')
    list(cfg)
} else {
    var Client = require('../lib/client')
    new Client(cfg)
}


function split(str) {
    return str.split(',')
}

function getCfg(commander) {
    var cfg = {}
    commander.options.forEach(function(item, index, list) {
        var key = item.long.substring(2)
        if(key in commander) {
            cfg[key] = commander[key]
        }
    })
    ;delete cfg.version
    return cfg
}
