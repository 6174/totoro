#!/usr/bin/env node

var fs = require('fs')
var commander = require('commander')
var async = require('async')
var path = require('path')
require('colorful').colorful()

var Client = require('../lib/client/client')
var Contractor = require('../lib/server/server')
var list = require('../lib/client/list')
var options = require('../lib/options-handler')

var pkgStr = fs.readFileSync(path.join(module.filename, '../../package.json'))
var pkg = JSON.parse(pkgStr)

commander.helpInformation = function() {
    return [
        '',
        '  A simple, easy-to-use and stable front-end unit testing tool.'.to.cyan.color,
        '',
        '  Usage: '.to.green.color,
        '    ' + this._name + ' ' + this.usage(),
        '' + this.commandHelp(),
        '  Options:'.to.green.color,
        '' + this.optionHelp().replace(/^/gm, '    '),
        ''
    ].join('\n')
}

function splitStr(val) {
    return val.split(',')
}

commander
    .usage('[options]')

commander
    .option('-v, --version', 'output the version number')
    .option('--verbose', 'show debug log')
    .option('--runner', 'runner path')
    .option('--charset', 'runner charset')
    .option('--browsers', 'specify browsers to run test', splitStr)
    .option('--adapter', 'specify report adapter')
    .option('--timeout', 'client timeout')
    .option('--server', 'launch the server')
    .option('--serverHost', 'specify server host')
    .option('--serverPort', 'specify server port')
    .option('--list', 'view available browsers')


commander.on('--help', function() {
    console.log()
    console.log('  ' + 'More info:'.to.green.color)
    console.log('    ' + 'https://github.com/totorojs/totoro'.to.underline.color)
    console.log()
});


commander.parse(process.argv)

if (commander.rawArgs.length === 3 && (commander.rawArgs[2] === '-v' ||
        commander.rawArgs[2] === '--version')) {
    console.info(pkg.version)
    process.exit(0)
}

if (commander.server) {
    new Contractor(options.getServerCfg(commander))
} else if (commander.list) {
    list(options.getListCfg(commander))
} else {
    new Client(options.getClientCfg(commander))
}
