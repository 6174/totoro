#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var commander = require('commander')
var colorful = require('colorful')
var common = require('totoro-common')

var Client = require('../lib/client')


commander.helpInformation = function() {
    return [
        '',
        colorful.cyan('  A simple, easy-to-use and stable front-end unit testing tool.'),
        '',
        colorful.green('  Usage:'),
        '    ' + this._name + ' ' + this.usage(),
        '',
        colorful.green('  Options:'),
        '' + this.optionHelp().replace(/^/gm, '    '),
        '',
        colorful.green('  More Info:'),
        '    ' + colorful.underline('https://github.com/totorojs/totoro'),
        '',
        ''
    ].join('\n')
}

commander
    .option('-v, --version', 'output the version number')
    .option('--verbose', 'show debug log')
    .option('--runner [s]', 'runner path')
    .option('--browsers [s]', 'browsers to run test', common.split)
    .option('--adapter [s]', 'report adapter')
    .option('--charset [s]', 'charset')
    .option('--timeout [n]', 'client timeout')
    .option('--client-host [s]', 'client server host')
    .option('--client-port [n]', 'client server port')
    .option('--server-host [s]', 'specify server host')
    .option('--server-port [n]', 'specify server port')
    .option('--list', 'view available browsers')

commander.on('version', function() {
    console.log()
    var pkg = require('../package')
    console.log(pkg.name + '  ' + colorful.cyan(pkg.version))
    console.log()
    process.exit()
})

// listen before parse
commander.parse(process.argv)


if (commander.rawArgs.length === 3 && (commander.rawArgs[2] === '-v' ||
        commander.rawArgs[2] === '--version')) {
    console.info(pkg.version)
    process.exit(0)
}

/*
 * NOTE
 *
 * we just make all options in proper format and collect them
 * then continue to process them in corresponding methods rather than in this file
 * because when totoro is used as a required module, it will perform better in this way
 */

new Client(common.getCfg(commander))
