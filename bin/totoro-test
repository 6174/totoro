#!/usr/bin/env node

var commander = require('commander');
var async = require('async');
var path = require('path')
require('colorful').colorful();

var test = require('../lib/test-run');
var fsExt = require('../lib/utils/fs_ext')

commander.usage('[options]');

commander
  .option('-r, --run <filename>', '指定测试页: [run]')
  .option('-f, --force', '重新生成测试页')
  .option('-b, --browsers [browser name]', '获取服务浏览器列表: [browsers]');


commander.on('--help', function() {
  console.log();
  console.log('  ' + 'Examples:'.to.bold.blue.color);
  console.log();
  console.log('   测试标准的 cmd 模块');
  console.log();
  console.log('   $ ' + 'totoro test'.to.magenta.color);
  console.log();
  console.log('   运行指定的测试页面');
  console.log();
  console.log('   $ ' + 'totoro test '.to.magenta.color + ' ' + '-r'.to.cyan.color + ' path/runner.html');
  console.log();
  console.log('   重新生成测试页面');
  console.log();
  console.log('   $ ' + 'totoro test '.to.magenta.color + ' ' + '-f'.to.cyan.color);
  console.log();
  console.log('   For more information: ' + 'https://github.com/alipay/totoro/wiki'.to.underline.color);
  console.log();
});


commander.parse(process.argv);

// 解析参数

var options = {
    autoAdapt : false,
    stream : true,
    verbose : true,
    host : '10.15.52.87:9200' 
}

var optionActionsBaseDir = path.join(path.dirname(module.filename), '../lib/test-action')
var getActionMod = function(name) {
    return path.join(optionActionsBaseDir, name)
}

// 这两个需要顺序保证
var optionActions = [getActionMod('browsers.js'), getActionMod('run.js')]

var optionActions = fsExt.findFiles(optionActionsBaseDir, 
        function(f) {
            return optionActions.indexOf(f) < 0
        }, optionActions).map(function(f) {
            return require(f) 
        });

async.forEachSeries(optionActions, function(action, cb) {
    action(commander, options, cb)
}, function(stop) {
    if (!stop) {
        test(commander, options)
    } else {
        process.exit(0)
    }

});

